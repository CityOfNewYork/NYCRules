<?php

/**
 * @file
 * Tests for Relation module.
 */

/**
 * Relation helper class.
 */
class RelationTestCase extends DrupalWebTestCase {
  protected $sleep = FALSE;

  function setUp() {
    // Other modules will reuse this class, make sure to pass the arguments up.
    if (func_num_args()) {
      parent::setUp(func_get_args());
    }
    else {
      parent::setUp('relation');
    }

    // Defines users and permissions.
    $permissions = array(
      'create article content',
      'create page content',
      'administer relation types',
      'create relations',
      'edit relations',
      'delete relations',
    );
    $this->web_user = $this->drupalCreateUser($permissions);
    $this->drupalLogin($this->web_user);

    // Defines entities.
    $this->createRelationNodes();

    // Defines relation types.
    $this->createRelationTypes();

    // Defines end points.
    $this->createRelationEndPoints();

    // Defines relations.
    $this->createRelationSymmetric();
    $this->createRelationDirectional();
    $this->createRelationOctopus();
  }

  /**
   * Creates nodes.
   */
  function createRelationNodes() {
    $this->node1 = $this->drupalCreateNode(array('type' => 'article', 'promote' => 1, 'title' => 'Grandfather'));
    $this->node2 = $this->drupalCreateNode(array('type' => 'article', 'promote' => 0));
    $this->node3 = $this->drupalCreateNode(array('type' => 'page', 'promote' => 1, 'title' => 'Father'));
    $this->node4 = $this->drupalCreateNode(array('type' => 'page', 'promote' => 0, 'title' => 'Baby'));
    $this->node5 = $this->drupalCreateNode(array('type' => 'page', 'promote' => 0));
  }

  /**
   * Creates end points.
   */
  function createRelationEndPoints() {
    $this->endpoints = array(
      array('entity_type' => 'node', 'entity_id' => $this->node1->nid),
      array('entity_type' => 'node', 'entity_id' => $this->node4->nid),
    );
    $this->endpoints_4 = array(
      array('entity_type' => 'node', 'entity_id' => $this->node1->nid),
      array('entity_type' => 'node', 'entity_id' => $this->node2->nid),
      array('entity_type' => 'node', 'entity_id' => $this->node3->nid),
      array('entity_type' => 'node', 'entity_id' => $this->node4->nid),
    );
  }

  /**
   * Creates a set of standard relation types.
   */
  function createRelationTypes() {
    $this->relation_types['symmetric'] = array(
      'relation_type'   => 'symmetric',
      'label' => 'symmetric',
      'source_bundles' => array('node:article', 'node:page', 'taxonomy_term:*', 'user:*'),
    );
    $this->relation_types['directional'] = array(
      'relation_type'   => 'directional',
      'label' => 'directional',
      'directional' => TRUE,
      'source_bundles' => array('node:*'),
      'target_bundles' => array('node:page'),
    );
    $this->relation_types['octopus'] = array(
      'relation_type'   => 'octopus',
      'label' => 'octopus',
      'min_arity' => 3,
      'max_arity' => 5,
      'source_bundles' => array('node:article', 'node:page'),
    );
    foreach ($this->relation_types as $relation_type) {
      relation_type_save($relation_type);
    }
  }

  /**
   * Creates a Symmetric relation.
   */
  function createRelationSymmetric() {
    // Article 1 <--> Page 4
    $this->relation_type_symmetric = $this->relation_types['symmetric']['relation_type'];
    $this->rid_symmetric = $this->saveRelation($this->relation_type_symmetric, $this->endpoints);
  }

  /**
   * Creates a Directional relation.
   */
  function createRelationDirectional() {
    // Article 1 --> Page 3
    $this->endpoints[1]['entity_id'] = $this->node3->nid;
    $this->endpoints[1]['r_index'] = 1;
    $this->relation_type_directional = $this->relation_types['directional']['relation_type'];
    $this->rid_directional = $this->saveRelation($this->relation_type_directional, $this->endpoints);
    $this->endpoints[0]['entity_id'] = $this->node3->nid;
    $this->endpoints[1]['entity_id'] = $this->node4->nid;
    $this->saveRelation($this->relation_type_directional, $this->endpoints);
  }

  /**
   * Creates an Octopus (4-ary) relation.
   */
  function createRelationOctopus() {
    // Nodes 1, 2, 3, 4 are related.
    $this->relation_type_octopus = $this->relation_types['octopus']['relation_type'];
    $this->rid_octopus = $this->saveRelation($this->relation_type_octopus, $this->endpoints_4);
  }

  /**
   * Saves a relation.
   */
  function saveRelation($relation_type, $endpoints) {
    $relation = relation_create($relation_type, $endpoints);
    $rid = relation_save($relation);
    if ($this->sleep) {
      sleep(1);
    }
    return $rid;
  }
}

/**
 * Tests Relation API.
 * Create nodes, add relations and verify that they are related.
 * This test suite also checks all methods available in RelationQuery.
 */
class RelationAPITestCase extends RelationTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Relation test',
      'description' => 'Tests Relation API.',
      'group' => 'Relation',
    );
  }

  function setUp() {
    // This is necessary for the ->propertyOrderBy('created', 'DESC') test.
    $this->sleep = TRUE;
    parent::setUp();
  }

  /**
   * Tests all available methods in RelationQuery.
   * Creates some nodes, add some relations and checks if they are related.
   */
  function testRelationQuery() {
    $relations = entity_load('relation', array_keys(relation_query('node', $this->node1->nid)->execute()));

    // Check that symmetric relation is correctly related to node 4.
    $this->assertEqual($relations[$this->rid_symmetric]->endpoints[LANGUAGE_NONE][1]['entity_id'], $this->node4->nid, 'Correct entity is related: ' . $relations[$this->rid_symmetric]->endpoints[LANGUAGE_NONE][1]['entity_id'] . '==' . $this->node4->nid);

    // Get relations for node 1, should return 3 relations.
    $count = count($relations);
    $this->assertEqual($count, 3);

    // Get number of relations for node 4, should return 3 relations, 1 is in
    // symmetrical, 3 and 4 is in octopus.
    $count = relation_query('node', $this->node4->nid)
      ->count()
      ->execute();
    $this->assertEqual($count, 3);

    // Get number of relations for node 5, should return 0 relations.
    $count = relation_query('node', $this->node5->nid)
      ->count()
      ->execute();
    $this->assertFalse($count);

    // Get relations between entities 2 and 5 (none).
    $count = relation_query('node', $this->node2->nid)
      ->related('node', $this->node5->nid)
      ->count()
      ->execute();
    $this->assertFalse($count);

    // Get directed relations for node 3 using index, should return only one
    // relation. The other node 3 relation has an r_index 0.
    $relations = relation_query('node', $this->node3->nid, 1)
      ->execute();
    $this->assertEqual(count($relations), 1);
    $this->assertTrue(isset($relations[$this->rid_directional]), 'Got the correct directional relation for nid=3.');

    // Get relations between entities 2 and 3 (octopus).
    $relations = relation_query('node', $this->node2->nid)
      ->related('node', $this->node3->nid)
      ->execute();
    $count = count($relations);
    $this->assertEqual($count, 1);
    // Check that we have the correct relations
    $this->assertEqual(isset($relations[$this->rid_octopus]), 'Got one correct relation.');

    // Get relations for node 1 (symmetric, directional, octopus), limit to
    // directional and octopus with relation_type().
    $relations = relation_query('node', $this->node1->nid)
      ->propertyCondition('relation_type', array(
        $this->relation_types['directional']['relation_type'],
        $this->relation_types['octopus']['relation_type'],
      ))
      ->execute();
    $count = count($relations);
    $this->assertEqual($count, 2);
    // Check that we have the correct relations.
    $this->assertTrue(isset($relations[$this->rid_directional]), 'Got one correct relation.');
    $this->assertTrue(isset($relations[$this->rid_octopus]), 'Got a second one.');

    // Get last two relations for node 1.
    $relations = relation_query('node', $this->node1->nid)
      ->range(1, 2)
      ->propertyOrderBy('rid', 'ASC')
      ->execute();
    $count = count($relations);
    $this->assertEqual($count, 2);
    // Check that we have the correct relations.
    $this->assertTrue(isset($relations[$this->rid_directional]), 'Got one correct relation.');
    $this->assertTrue(isset($relations[$this->rid_octopus]), 'Got a second one.');

    // Get all relations on node 1 and sort them in reverse created order.
    $relations = relation_query('node', $this->node1->nid)
      ->propertyOrderBy('created', 'DESC')
      ->execute();
    $this->assertEqual(array_keys($relations), array($this->rid_octopus, $this->rid_directional, $this->rid_symmetric));
  }

  /**
   * Tests relation types.
   */
  function testRelationTypes() {
    // Symmetric.
    $related = relation_get_related_entity('node', $this->node4->nid);
    $this->assertEqual($this->node1->nid, $related->nid);

    // Directional.
    $related = relation_get_related_entity('node', $this->node3->nid, $this->relation_types['directional']['relation_type']);
    $this->assertEqual($this->node1->nid, $related->nid);
  }

  /**
   * Tests saving of relations.
   */
  function testRelationSave() {
    foreach ($this->relation_types as $value) {
      $relation_type = $value['relation_type'];
      $endpoints = isset($value['min_arity']) ? $this->endpoints_4 : $this->endpoints;
      $relation = relation_create($relation_type, $endpoints);
      $rid = relation_save($relation);

      $this->assertTrue($rid, 'Relation created.');
      $count = count($relation->endpoints[LANGUAGE_NONE]);
      $this->assertEqual($count, count($endpoints));
      $this->assertEqual($relation->arity, count($endpoints));
      $this->assertEqual($relation->relation_type, $relation_type);
      foreach ($relation->endpoints[LANGUAGE_NONE] as $endpoint) {
        $need_ids[$endpoint['entity_id']] = TRUE;
      }
      foreach ($relation->endpoints[LANGUAGE_NONE] as $endpoint) {
        $this->assertEqual($endpoint['entity_type'], 'node', 'The entity type is node: ' . $endpoint['entity_type']);
        $this->assertTrue(isset($need_ids[$endpoint['entity_id']]), 'The entity ID is correct: ' . $need_ids[$endpoint['entity_id']]);
        unset($need_ids[$endpoint['entity_id']]);
      }
      $this->assertFalse($need_ids, 'All ids found.');
    }
  }

  /**
   * Tests deletion of a relation.
   */
  function testRelationDelete() {
    $relations = relation_query('node', $this->node1->nid)
      ->propertyOrderBy('created', 'DESC')
      ->execute();
    $relation = $relations[$this->rid_directional];

    $this->drupalPost("relation/$relation->rid/delete", array(), t('Delete'));
    $arg = array(':rid' => $relation->rid);
    $this->assertFalse(db_query('SELECT COUNT(*) FROM {relation} WHERE rid = :rid', $arg)->fetchField(), 'Nothing in relation table after delete.');
    $this->assertFalse(db_query('SELECT COUNT(*) FROM {relation_revision} WHERE rid = :rid', $arg)->fetchField(), 'Nothing in relation revision table after delete.');
    $skeleton_relation = entity_create_stub_entity('relation', array($relation->rid, $relation->vid, $relation->relation_type));
    field_attach_load('relation', array($relation->rid => $skeleton_relation));
    $this->assertIdentical($skeleton_relation->endpoints, array(), t('Field data not present after delete'));

    // Try deleting the content types.
    $this->drupalGet("admin/structure/relation/manage/$this->relation_type_symmetric/delete");
    $num_relations = 1;
    // See relation_type_delete_confirm() in relation.admin.inc
    $this->assertRaw(format_plural($num_relations, 'The %label relation type is used by 1 relation on your site. If you remove this relation type, you will not be able to edit  %label relations and they may not display correctly.', 'The %label relation type is used by @count relations on your site. If you remove %label, you will not be able to edit %label relations and they may not display correctly.', array('%label' => $this->relation_types['symmetric']['label'], '@count' => $num_relations)), 'Correct number of relations found (1) for ' . $this->relation_types['symmetric']['label'] . ' relation type.');
  }
}
